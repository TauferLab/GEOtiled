{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GEOtiled Documentation","text":"<p>Welcome to the documentation for the GEOtiled Library!</p> <p>This set of guides is designed to help you utilize the workflow to rapidly generate terrain parameters using our library.</p> <p>The instructions include details on the data capable of being generated by GEOtiled and recommendations to fully take advantage of the performance offered by the framework.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ul> <li>\ud83d\udce6 Library Guide: Explore the available functions available in the GEOtiled software used to generate data with Python API.</li> <li>\ud83d\udcca Dashboard Guide: Learn how to utilize the available dashboard to visualize existing data generated by GEOtiled.</li> <li>\ud83d\udcbe Data Guide: Learn about the terrain parameters you can generate with GEOtiled and recommended configurations for producing data.</li> <li>\ud83d\udd27 Function Documentation: View documentation on all functions available from the GEOtiled library.</li> </ul>"},{"location":"#features","title":"\ud83e\uddf0 Features","text":"<ul> <li>Download: Download DEMs from the United States Geological Survey (USGS) at various resolutions and countries in North America.</li> <li>Compute: Leverage multiprocessing to quickly compute numerous terrain parameters from DEMs.</li> <li>Visualize: Utilize built-in functions or a dashboard to visualize terrain parameter data.</li> </ul>"},{"location":"#next-steps","title":"\ud83d\udcd1 Next Steps","text":"<p>Start by exploring the \ud83d\udce6 Library Guide to begin generating data or read the \ud83d\udcca Dashboard Guide to setup and visualize already existing data.</p>"},{"location":"dashboard/","title":"\ud83d\udcca Dashboard Guide","text":"<p>This guide goes over how to create and run the dashboard for data are generated with GEOtiled. Currently, 17 different terrain parameters generated with GEOtiled at 30m and 10m resolution within the region of the Continental United States (CONUS) are available for visualization.</p>"},{"location":"dashboard/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Before installation, ensure you have Docker installed.</p>"},{"location":"dashboard/#build-container","title":"Build Container","text":"<p>After cloning the GEOtiled repository, move into the <code>dashboard</code> directory. Run the following in the terminal to build the container.</p> <pre><code>docker build -t geotiled-dashboard .\n</code></pre>"},{"location":"dashboard/#run-container","title":"Run container","text":"<p>Once the container is built, run the following in the terminal to activate the container.</p> <pre><code>docker run --rm -dp 10142:10142 geotiled-dashboard\n</code></pre> <p>From there, you should be able to access the dashboard at http://localhost:10142/dashboard.</p> <p>If running from a VM, instead replace <code>localhost</code> with the address of the VM.</p>"},{"location":"dashboard/#notes","title":"Notes","text":"<ul> <li>The larger the data, the longer it will take to visualize.</li> <li>Larger states and higher resolutions directly correlate to larger file size.</li> <li>It is recommended to downsample larger data for performance improvements to visualization.</li> </ul>"},{"location":"data/","title":"\ud83d\udcbe Data Guide","text":"<p>The GEOtiled workflow is designed to work with files in the GeoTIFF (extension: <code>.tif</code>) format, and allows for download of Digital Elevation Model (DEM) data from the United States Geological Survey (USGS). This page goes over available data from the USGS useable by GEOtiled, the list of computable terrain parameters, and processing recommendations to ensure computational compatibility and quality.</p> <p>If GDAL is installed, it is possible to view metadata of a GeoTIFF file such as the total size (x,y), coordinate reference system (CRS), pixel size, coordinate extents, and band(s) information using the following command line function <code>gdalinfo &lt;your_file&gt;.tif</code>.</p>"},{"location":"data/#compatible-datasets","title":"Compatible Datasets","text":"<p>The USGS offers DEMs at various resolutions on the TNM Download page. GEOtiled always downloads the latest versions of available DEMs from the USGS. Below are the available datasets compatible with GEOtiled and along with their resolution and spatial coverage.</p> <p>National Elevation Dataset (NED) Alaska 2 arc-second Current \u00a0\u00a0 - Resolution: 60 meters \u00a0\u00a0 - Coverage: Alaska National Elevation Dataset (NED) 1 arc-second Current \u00a0\u00a0 - Resolution: 30 meters \u00a0\u00a0 - Coverage: USA, Canada, Mexico National Elevation Dataset (NED) 1/3 arc-second Current \u00a0\u00a0 - Resolution: 10 meters \u00a0\u00a0 - Coverage: Continental United States (CONUS) Alaska IFSAR 5 meter DEM \u00a0\u00a0 - Resolution : 5 meters \u00a0\u00a0 - Coverage: Alaska Digital Elevation Model (DEM) 1 meter \u00a0\u00a0 - Resolution: 1 meter \u00a0\u00a0 - Coverage: CONUS (partial)</p>"},{"location":"data/#computable-terrain-parameters","title":"Computable Terrain Parameters","text":"<p>The following is a comprehensive list of computable terrain parameters with GEOtiled using either underlying GIS library. SAGA documentation for each terrain parameter's underlying function call is linked. All terrain parameters computed by GDAL are done using the gdal.DEMProcessing() function.</p>"},{"location":"data/#gdal-and-saga","title":"GDAL and SAGA","text":"<p>Slope Aspect Hillshade \u00a0\u00a0 - GDAL and SAGA define hillshade differently, so results will vary substantially between the two</p>"},{"location":"data/#saga-only","title":"SAGA Only","text":"<p>Plan Curvature Profile Curvature Convergence Index Total Catchment Area Flow Width Specific Catchment Area \u00a0\u00a0 - Total Catchment Area is a required input for computation, and is computed automatically by GEOtiled Channel Network (Shapefile) Channel Network (GeoTIFF) Drainage Basins (Shapefile) Drainge Basins (GeoTIFF) Flow Connectivity Flow Direction Channel Network Base Level \u00a0\u00a0 - Channel Network (GeoTIFF) is a required input for computation, and is computed automatically by GEOtiled Channel Network Distance \u00a0\u00a0 - Channel Network (GeoTIFF) is a required input for computation, and is computed automatically by GEOtiled Filled Depressions Watershed Basins LS Factor \u00a0\u00a0 - Both Slope and Specific Catchment Area are required inputs for computation, and they are automatically computed by GEOtiled Topographic Wetness Index \u00a0\u00a0 - Both Slope and Specific Catchment Area are required inputs for computation, and they are automatically computed by GEOtiled Valley Depth \u00a0\u00a0 - The underlying function for this terrain parameter runs much slower than other functions. Relative Slope Position \u00a0\u00a0 - The underlying function for this terrain parameter runs much slower than other functions.  </p>"},{"location":"data/#processing-recommendations","title":"Processing Recommendations","text":""},{"location":"data/#coordinate-reference-system-crs","title":"Coordinate Reference System (CRS)","text":"<p>DEMs from the USGS in the GeoTIFF format are stored in the EPSG:4269 coordinate system. The CRS fully covers North America and has dimensions of degrees. It is recommended that the projection to use when computing terrain parameters with GEOtiled:</p> <ul> <li>Has pixel sizes with even length and width (i.e., square) as it is a computational requirement for underlying GIS libraries GDAL and SAGA </li> <li>Has full coverage of at least the Continental United States (CONUS) to ensure the accuracy of the final data</li> <li>Has units of meters to prevent specific computational issues for most terrain parameters</li> </ul> <p>A recommended projection to use is the EPSG:5070 CRS. It covers North America, and has units of meters with square grid cells.</p> <p>GeoTIFF files can be reprojected using the <code>geotiled.reproject()</code> function (whose details are in the Library Guide).</p> <p>IMPORTANT: Reprojection will cause changes to the size (x,y) of the data. Ensure that other configurations set within GEOtiled (such as tile size) are set accordingly to account for changes in input data caused by reprojection.</p>"},{"location":"data/#setting-tile-size","title":"Setting Tile Size","text":"<p>For the best performance results during computation of terrain parameters, the number of tiles an input DEM is split into should match the number of cores being used for multiprocessing. You can use <code>gdalinfo &lt;your_file&gt;.tif</code> in the command line to look at the size (x,y) of the input file to determine the best tile split to use. Optionally, the <code>num_tiles</code> parameter in the <code>geotiled.crop_and_compute()</code> function (whose details are in the Library Guide) can be set to the number of cores to automatically determine good tile size dimensions. </p>"},{"location":"functions/","title":"\ud83d\udd27 Function Documentation","text":"<p>Here is where all useable functions from the GEOtiled library are documented.</p>"},{"location":"functions/#build_stack","title":"<code>build_stack()</code>","text":"<pre><code>geotiled.build_stack(input_files, output_file, verbose=False)\n</code></pre> <p>Stacks multiple rasters into a single raster with multiple bands. The band order will be based off the input_files list order.</p> <p>Parameters</p> Name Type Description Default input_files <code>List[str]</code> Names/paths of rasters to stack together. \u2014 output_file <code>str</code> Name/path of file to store stacked raster data. \u2014 verbose <code>bool</code> Whether to print additional progress messages during execution. <code>False</code> <p>NOTE: It is recommended that all rasters being stacked have a description for easier identification between bands in the stacked raster.</p>"},{"location":"functions/#crop_and_compute","title":"<code>crop_and_compute()</code>","text":"<pre><code>geotiled.crop_and_compute(input_file, parameter_list, tile_dimensions=None, num_tiles=None, compute_method=\"SAGA\", convert_file=True, projection=5070, buffer_size=10, num_processes=None, cleanup=False, verbose=False)\n</code></pre> <p>Computes terrain parameters in parallel. This function handles folder creation, cropping of the elevation data into tiles, parallel computation of terrain parameters, and debuffering of computed terrain parameter tiles. Concurrent computation will, by default, use the max number of available cores for processing unless <code>num_processes</code> is specified.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path to input raster file with elevation data to compute terrain paramters from. \u2014 parameter_list <code>List[str]</code> List of terrain parameters to compute. If special keyword \u2018all\u2019 in list, will compute all terrain parameters for specific library. \u2014 tile_dimensions <code>List[int]</code> Column and row length of pixels to use for cropped tiles [x,y]. <code>None</code> num_tiles <code>int</code> Will dynamically determine the size of the tiles if column_length and row_length is not specified. <code>None</code> compute_method <code>str</code> API to use for computing terrain parameters. <code>'SAGA'</code> convert_file <code>bool</code> Determine if files should be converted to SGRD when using SAGA as the compute method. <code>True</code> projection <code>int</code> EPSG projection to set to metadata for created shapefiles. <code>5070</code> buffer_size <code>int</code> Number of buffer pixels to use for cropping. <code>10</code> num_processes <code>int</code> Number of concurrent processes to use for computing terrain parameters. <code>None</code> cleanup <code>bool</code> Specifies if cropped files used for computing parameters should be deleted after computation. <code>False</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation of parameters. <code>False</code> <p>NOTE: It is recommended to use a tile size the produces an equivalent tile count that equals the number of concurrent processes being used for best performance results. NOTE: It is important to set <code>projection</code> to the same projection of the <code>input_file</code>.</p>"},{"location":"functions/#crop_to_coordinates","title":"<code>crop_to_coordinates()</code>","text":"<pre><code>geotiled.crop_to_coordinates(input_file, output_file, upper_left, lower_right)\n</code></pre> <p>Crops a raster file based on a specified upper-left and lower-right coordinates. The upper_left and lower_right coordinates define the bounding box for cropping. Coordinates must be in the same projection as the raster.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path of the input raster file to crop. \u2014 output_file <code>str</code> Name of cropped raster to save the cropped data to. \u2014 upper_left <code>tuple of float</code> Float tuple specifying upper-left (x,y) coordinates to crop raster from. \u2014 lower_right <code>tuple of float</code> Float tuple specifying lower-right (x,y) coordinates to crop raster from. \u2014"},{"location":"functions/#crop_to_region","title":"<code>crop_to_region()</code>","text":"<pre><code>geotiled.crop_to_region(input_file, output_file, codes)\n</code></pre> <p>Crop a raster file to the boundaries specified by multiple shapefiles. Shapefiles will be combined into a single geometry for cropping. The function automatically handles downloading shapefiles that are not present.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path of input raster file to crop. \u2014 output_file <code>str</code> Name/path of output raster file cropped data will be written to. \u2014 codes <code>List[str]</code> List of shapefile codes that will outline the cropping region. \u2014 <p>Returns</p> Name Type Description Default shape_paths <code>List[str]</code> Returns a list of paths to shapefiles used for cropping. \u2014"},{"location":"functions/#crop_to_valid_data","title":"<code>crop_to_valid_data()</code>","text":"<pre><code>geotiled.crop_to_valid_data(input_file, output_file, projection=\"EPSG:4269\", block_size=512)\n</code></pre> <p>Crops a raster file to the extents of valid data, where valid data is a row or column of data that contains at least one non-nan value (i.e., it crops borders of the raster file containing rows or columns of only nan values). Blocking is used to help minimize RAM usage, and should be adjusted accordingly.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path of raster file to crop. \u2014 output_file <code>str</code> Name/path of raster file to save cropped data to. \u2014 projection <code>str</code> Name of projection to reference for translation of new file. <code>'EPSG:4269'</code> block_size <code>int</code> Block size to use when computing extents. <code>512</code>"},{"location":"functions/#crop_to_window","title":"<code>crop_to_window()</code>","text":"<pre><code>geotiled.crop_to_window(input_file, output_file, window)\n</code></pre> <p>Crops a raster file to a specific window where the window references 2D matrix indices.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path to input file to be cropped. \u2014 output_file <code>str</code> Name/path to file to write the cropped data. \u2014 window <code>List[int], Tuple</code> List or tuple of format [left_x, top_y, width, height] where left_x and top_y are matrix indices of the upper-left corner of the cropping window, and width and height specify the dimensions of the cropping window in pixels. \u2014"},{"location":"functions/#download_files","title":"<code>download_files()</code>","text":"<pre><code>geotiled.download_files(download_list, download_folder)\n</code></pre> <p>Download file(s) from a list of URLs simultaneously using threading and showcases download progress via a tqdm progress bar.</p> <p>Parameters</p> Name Type Description Default download_list <code>str</code>, <code>List[str]</code> The name/path of a text file. This file should contain download URLs separated by newlines. A list of download URLs. \u2014 download_folder <code>str</code> Name/path of the folder where the downloaded files will be stored. \u2014"},{"location":"functions/#download_shapefiles","title":"<code>download_shapefiles()</code>","text":"<pre><code>geotiled.download_shapefiles(codes)\n</code></pre> <p>Downloads specified shapefile(s) off the USGS webpage and stores them in a shapefiles folder located in the working directory. All codes passed should be valid US state abbreviations. It will skip downloading already existing shapefiles.</p> <p>Parameters</p> Name Type Description Default codes <code>str</code>, <code>List[str]</code> Comma-separated string of valid codes. List of valid codes. \u2014"},{"location":"functions/#extract_raster","title":"<code>extract_raster()</code>","text":"<pre><code>geotiled.extract_raster(csv_file, raster_file, band_names, verbose=False)\n</code></pre> <p>Uploads raster data to a CSV that already has x,y coordinates. Only data from the raster that has matching x,y coordinates are written to the CSV. Order of band_names should correlate to order of the raster\u2019s bands. If no x,y coordinates in the CSV correlate to those of the raster file, incorrect or no values will be extracted.</p> <p>Parameters</p> Name Type Description Default csv_file <code>str</code> Name/path to CSV file to read/write to. \u2014 raster_file <code>str</code> Name/path to raster file to read to values from. \u2014 band_names <code>List[str]</code> Names of columns correlating to raster bands. Order matters. \u2014 verbose <code>bool</code> Determine if additional print statements should be used to track computation of parameters. <code>False</code>"},{"location":"functions/#fetch_dems","title":"<code>fetch_dems()</code>","text":"<pre><code>geotiled.fetch_dems(shapefile=None, bbox={\"xmax\": -83.815, \"xmin\": -84.0387, \"ymax\": 36.04, \"ymin\": 35.86}, dataset=\"30m\", txt_file=\"download_urls.txt\", save_to_txt=True, download_folder=\"dem_tiles\", download=False, verbose=False)\n</code></pre> <p>Queries USGS National Map API to fetch DEM data URLs using specified filters and can either save the list of URLs to a text file and/or download from the list of URLs immediately.</p> <p>Parameters</p> Name Type Description Default shapefile <code>str</code> Code of shapefile with which a bounding box will be generated (default is None). Overrides the bbox parameter if set. <code>None</code> bbox <code>dict</code> Bounding box coordinates to query for DEM data (default is {'xmin': -84.0387, 'ymin': 35.86, 'xmax': -83.815, 'ymax': 36.04}). <code>{'xmin': -84.0387, 'ymin': 35.86, 'xmax': -83.815, 'ymax': 36.04}</code> dataset <code>str</code> Resolution of DEM data to download (default is '30m'). <code>'30m'</code> txt_file <code>str</code> Name of text file to save URLs to (default is 'download_urls.txt'). <code>'download_urls.txt'</code> save_to_txt <code>bool</code> Allow DEM URLs to be saved to a text file (default is True). <code>True</code> download_folder <code>str</code> Name of the download folder to store downloaded DEMs in (default is 'dem_tiles'). <code>'dem_tiles'</code> download <code>bool</code> Allow DEM URLs retrieved to be immediately downloaded (default is False). <code>False</code> verbose <code>bool</code> Determine if additional print statements should be used to track download (default is False). <code>False</code> <p>NOTE: Available resolutions to download can be found in the Data Guide.</p>"},{"location":"functions/#merge_shapefiles","title":"<code>merge_shapefiles()</code>","text":"<pre><code>geotiled.merge_shapefiles(input_folder, output_file, cleanup=False, verbose=False)\n</code></pre> <p>This function merges multiple shapefiles together into a single shapefile. Shapefiles provided should be in the .shp format.</p> <p>Parameters</p> Name Type Description Default input_folder <code>str</code> Name of folder where shapefiles to merge are stored. \u2014 output_file <code>str</code> Name of output file that has merged shapefiles. \u2014 cleanup <code>bool</code> Determine if files from input folder should be deleted after computation. <code>False</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation. <code>False</code> <p>NOTE: Ensure that all shapefiles you wish to merge are located in the <code>input_folder</code>.</p>"},{"location":"functions/#mosaic_rasters","title":"<code>mosaic_rasters()</code>","text":"<pre><code>geotiled.mosaic_rasters(input_folder, output_file, description=None, cleanup=False, verbose=False)\n</code></pre> <p>Mosaics together raster files into a single raster. The raster will only contain one band, and the user has the option to update the description of the band.</p> <p>Parameters</p> Name Type Description Default input_folder <code>str</code> Name/path to the folder containing rasters to mosaic. \u2014 output_file <code>str</code> Name/path to the file to write the mosaicked rasters data to. \u2014 description <code>str</code> Description to add to mosaicked raster\u2019s band. <code>None</code> cleanup <code>bool</code> Determines if files from input_folder should be deleted after mosaic is complete. <code>False</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation. <code>False</code> <p>NOTE: Ensure that all rasters you wish to merge are located in the <code>input_folder</code>.</p>"},{"location":"functions/#plot_raster","title":"<code>plot_raster()</code>","text":"<pre><code>geotiled.plot_raster(input_file, plot_title=None, reproject_gcs=False, projection='EPSG:4269', shapefiles=None, remove_nans=False, downsample=1, dpi=150, cmap='inferno', nancolor='white', ztype='Z', zunit=None, xyunit=None, vmin=None, vmax=None, bordercolor='black', borderlinewidth=1.5, clean=False, save_to_img=None, verbose=False)\n</code></pre> <p>Plots a raster with user-specified modifications. The user also has the option to save the plot to a file.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path of the raster file to plot. \u2014 plot_title <code>str</code> Title for plot. <code>None</code> reproject_gcs <code>bool</code> Determine if raster should be reprojected before visualization. <code>False</code> projection <code>str</code> Projection to change raster to if reprojection is specified. <code>'EPSG:4269'</code> shapefiles <code>List[str]</code> List of valid shapefile codes to crop raster data to before visualization. <code>None</code> remove_nans <code>bool</code> Determine if nan-borders on data should be removed before plotting. <code>False</code> downsample <code>int</code> Factor to downsample the raster by. <code>1</code> dpi <code>int</code> Resolution in dots per inch for the figure. <code>150</code> cmap <code>str</code> Colormap used for visualization. <code>'inferno'</code> nancolor <code>str</code> Color to use for NaN values. <code>'white'</code> ztype <code>str</code> Data that is represented by the z-axis. <code>'Z'</code> zunit <code>str</code> Units for the data values (z-axis) which is inferred unless specified. <code>None</code> xyunit <code>str</code> Units for the x and y axes which is inferred unless specified. <code>None</code> vmin <code>float</code> Value of lower bound for coloring on plot which is the minimum of the data unless specified. <code>None</code> vmax <code>float</code> Value of upper bound for coloring on plot which is the maximum of the data unless specified. <code>None</code> bordercolor <code>str</code> Color for the shapefile boundary if one is used for cropping. <code>'black'</code> borderlinewidth <code>float</code> Line width for the shapefile boundary if one is used for cropping. <code>1.5</code> clean <code>bool</code> Determine whether to plot only the image. <code>False</code> save_to_img <code>str</code> Name/path to image file to save plot to. <code>None</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation of parameters. <code>False</code> <p>Returns</p> Name Type Description Default raster_array <code>np.ndarray</code> The data, in array format, of the plotted raster. \u2014 <p>Outputs</p> Name Type Description Default Image \u2014 Displays the plot of a raster with specified modifications. \u2014 <p>NOTE: Downsampling is recommended for larger raster files to ensure efficient plotting.</p>"},{"location":"functions/#plot_shapefile","title":"<code>plot_shapefile()</code>","text":"<pre><code>geotiled.plot_shapefile(input_file, plot_title='', reproject_gcs=False, projection=4269, crop_to_shape=None, save_to_img=None, verbose=False)\n</code></pre> <p>Visualizes a shapefile in a plot. The projection can be changed, and the data can be cropped to the bounds of another shapefile. The user also has the option to save the plot to a file.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path to the shapefile to plot. \u2014 plot_title <code>str</code> Title to assign to plot. <code>''</code> reproject_gcs <code>bool</code> Determine whether to reproject data before visualization. <code>False</code> projection <code>int</code> If reprojecting data, specifies which EPSG to reproject to. <code>4269</code> crop_to_shape <code>str</code> State shapefile to crop data to. <code>None</code> save_to_img <code>str</code> Name/path of file to save plot to. <code>None</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation of parameters. <code>False</code> <p>Outputs</p> Name Type Description Default Image \u2014 Creates a plot for the shapefile. \u2014"},{"location":"functions/#print_computable_parameters","title":"<code>print_computable_parameters()</code>","text":"<pre><code>geotiled.print_computable_parameters()\n</code></pre> <p>Outputs all computable terrain parameters with GEOtiled. A special indicator \u2018(G)\u2019 indicates it is computable with GDAL.</p>"},{"location":"functions/#print_region_codes","title":"<code>print_region_codes()</code>","text":"<pre><code>geotiled.print_region_codes()\n</code></pre> <p>Outputs state abbreviations and their correlating states.</p>"},{"location":"functions/#reproject","title":"<code>reproject()</code>","text":"<pre><code>geotiled.reproject(input_file, output_file, projection, cleanup=False, verbose=False)\n</code></pre> <p>Reprojects a raster file to a specified projection where the result is saved to a new file. Multithreading is utilized to improve performance.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path of raster to reproject. \u2014 output_file <code>str</code> Name/path of file to write reprojected data to. \u2014 projection <code>str</code> Projection to use for reprojection. Can be a EPSG code (e.g. EPSG:4269) or the name/path to a WKT file. \u2014 cleanup <code>bool</code> Determine if input_file should be deleted after reprojection is complete. <code>False</code> verbose <code>bool</code> Determine if additional print statements should be used to track computation. <code>False</code> <p>NOTE: It is important to use this for preprocessing DEM data to have units of meters.</p>"},{"location":"functions/#set_working_directory","title":"<code>set_working_directory()</code>","text":"<pre><code>geotiled.set_working_directory(path)\n</code></pre> <p>Creates needed directories then sets the specified path as the working directory. It is important to run this before anything else to ensure data is stored in a desired location.</p> <p>Parameters</p> Name Type Description Default path <code>str</code> Working directory to store data in. \u2014"},{"location":"functions/#tif2csv","title":"<code>tif2csv()</code>","text":"<pre><code>geotiled.tif2csv(input_file, output_file, band_names, verbose=False)\n</code></pre> <p>Converts a GeoTIFF file and converts it into the CSV format. The CSV columns are the x coordinate, y coordinate, and raster values. NaN values indicate no data found at a particular index. If the GeoTIFF has multiple bands, the user can set the names of subsequent columns in the CSV containing each bands value for each x,y coordinate using the band_names parameter.</p> <p>Parameters</p> Name Type Description Default input_file <code>str</code> Name/path to GeoTIFF file to convert to a CSV. \u2014 output_file <code>str</code> Name/path to CSV file to save CSV data to. \u2014 band_names <code>List[str]</code> Names of columns correlating to raster bands. Order matters. \u2014 verbose <code>bool</code> Determine if additional print statements should be used to track computation of parameters. <code>False</code>"},{"location":"library/","title":"\ud83d\udce6 GEOtiled Library","text":"<p>The <code>geotiled</code> library offers numerous functions for download and preprocessing of Digital Elevation Model (DEM) data and computation of terrain parameters from said DEMs. Once you have cloned the the GitHub repository, this will guide you through available functions from the library along with a quick start guide on core functions to use for generating terrain parameters.</p>"},{"location":"library/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Before installation, ensure you have Python 3.7.0 or higher and pip installed. GEOtiled was developed and tested in Ubuntu 24.04, and stability on other Linux distributions remains untested.</p>"},{"location":"library/#environment-setup","title":"Environment Setup","text":"<ol> <li>Create a new Python virtual environment in a desired directory     &gt; Note: <code>&lt;your_path&gt;</code> should be replaced with your desired working directory <pre><code>python3 -m venv &lt;your_path&gt;/geotiled_env\n</code></pre></li> <li>Activate the new virtual environment <pre><code>source &lt;your_path&gt;/geotiled_env/bin/activate\n</code></pre></li> <li>Update pip <pre><code>pip install --upgrade pip\n</code></pre></li> </ol>"},{"location":"library/#system-packages","title":"System Packages","text":"<ol> <li>Update apt-get <pre><code>sudo apt-get update\n</code></pre></li> <li>Install libgdal-dev <pre><code>sudo apt install libgdal-dev=3.8.4+dfsg-3ubuntu3\n</code></pre></li> <li>Install SAGA <pre><code>sudo apt-get install saga\n</code></pre></li> <li>[Optional] Install Performance Copilot (Only used for performance analysis notebooks) <pre><code>sudo apt-get install pcp-zeroconf\n</code></pre></li> </ol>"},{"location":"library/#installing-geotiled","title":"Installing GEOtiled","text":"<ol> <li>Ensure virutal environment is activated <pre><code>source &lt;your_path&gt;/geotiled_env/bin/activate\n</code></pre></li> <li>Clone the repository in a desired working directory <pre><code>git clone https://github.com/TauferLab/GEOtiled\n</code></pre></li> <li>Change to the geotiled directory <pre><code>cd &lt;your_path&gt;/GEOtiled/geotiled\n</code></pre></li> <li>Install editable library <pre><code>pip install -e .\n</code></pre></li> </ol>"},{"location":"library/#common-issues","title":"Common Issues","text":"<p>If the following error occurs during computation:</p> <p><code>ImportError: cannot import name '_gdal_array' from 'osgeo'</code></p> <p>Then pip installed a cached version of GDAL. Run the following in the virtual environment to correct the issue: <pre><code>pip install --no-cache --force-reinstall gdal[numpy]==3.8.4\n</code></pre></p>"},{"location":"library/#geotiled-library_1","title":"\ud83d\udcda GEOtiled Library","text":""},{"location":"library/#getting-started","title":"Getting Started","text":"<p>The <code>geotiled</code> library can be imported by adding the following line to the top of a Python script:</p> <pre><code>import geotiled\n</code></pre> <p>It is recommended to set a working directory for storing data, as GEOtiled produces a lot of intermediary and final files during computation. GEOtiled comes with a function to set the working directory (which also handles creating missing folders).</p> <pre><code>geotiled.set_working_directory(\"your/working/directory\")\n</code></pre>"},{"location":"library/#downloading-dems","title":"Downloading DEMs","text":"<p><code>geotiled.fetch_dems()</code> downloads DEMs directly from the USGS TNM Download page within the bounds of a specified state or coordinate extents along with a desired resolution. Available resolutions for download can be viewed under the Compatible Datasets section in the Data Guide. The user has the option to either save the USUS download URLs to a text file and/or download the DEMs immediately. </p> <p><code>geotiled.download_files()</code> downloads files from a list of URLs provided in a text file. The downloaded files will be stored in a user-specified output folder located in the working directory.</p> <p>An example to download 30 meter DEMs for the state of Tennessee is given below:</p> <pre><code>geotiled.fetch_dems(shapefile=\"TN\", dataset=\"30m\", txt_file=\"TN_30m_urls.txt\", download=False)\n\ngeotiled.download_files(download_list=\"TN_30m_urls.txt\", download_folder=\"dem_tiles\")\n</code></pre> <p><code>geotiled.mosaic_rasters()</code> merges together numerous raster files into a single raster file of one band. It is important to merge together DEMs from the USGS before computation of terrain parameters. It will merge together all GeoTIFF files in a specified folder.</p> <p><code>geotiled.reproject()</code> changes the coordinate reference system (CRS) of raster data. DEMs from the USGS come in the EPSG:4269 CRS which uses units of decimal degrees. In general, it is good practice to reproject input data into a CRS with units of meters and square grid cells, so DEMs from the USGS should be reprojected before computation. The function allows for reprojection using a valid EPSG code or a WKT file with projection information.</p> <p>An example for preprocessing DEM data is given below (using CRS EPSG:5070):</p> <pre><code>geotiled.mosaic_rasters(input_folder=\"dem_tiles\", output_file=\"mosaic.tif\")\n\ngeotiled.reproject(input_file=\"mosaic.tif\", output_file=\"elevation.tif\", projection=\"EPSG:5070\")\n</code></pre>"},{"location":"library/#computing-terrain-parameters","title":"Computing Terrain Parameters","text":"<p><code>geotiled.crop_and_compute()</code> handles the cropping of the input DEM and concurrent computation of terrain parameters from subsequent DEM tiles. The user must specify the list of terrain parameters to compute. The full list of computable terrain parameters can be found under the Computable Terrain Parameters section in the Data Guide. Additionally, the user must also specify the tile size for each cropped tile and which library to use for computation. The function automatically consumes the max number of CPU cores on a machine for concurrent computation unless a specific count is specified.</p> <p><code>geotiled.mosaic_rasters()</code> is again used for merging terrain parameter tiles in the GeoTIFF format. <code>geotiled.crop_and_compute()</code> also handles debuffering of computed terrain parameter tiles, so the correct folder where the terrain parameter tiles are located must be given for accurate final results.</p> <p><code>geotiled.merge_shapefiles()</code> is used for merginging terrain parameter tiles that are output in the shapefile format. As with <code>geotiled.mosaic_rasters()</code>, the user must specify a folder where all shapefiles to merge are located.</p> <p>An example for computing terrain parameters is given below:</p> <pre><code>geotiled.crop_and_compute(input_file=\"elevation.tif\", parameter_list=[\"slope\",\"channel_network\"], tile_dimensions=[9103,4195], compute_method=\"SAGA\")\n\ngeotiled.mosaic_rasters(input_folder=\"unbuffered_slope_tiles\", output_file=\"slope.tif\")\n\ngeotiled.merge_shapefiles(input_folder=\"channel_network_tiles\", output_file=\"channel_network.shp\")\n</code></pre>"},{"location":"library/#visualizing-data","title":"Visualizing Data","text":"<p><code>geotiled.plot_raster()</code> visualizes a GeoTIFF. All plotting features can be found in the Function Documentation</p> <p><code>geotiled.plot_shapefile()</code> visualizes a shapefile. All plotting features can be found in the Function Documentation</p> <p>Examples of how to plot both types of data are given below:</p> <pre><code>geotiled.plot_raster(input_file=\"slope.tif\", plot_title=\"TN Slope 30m\", reproject_gcs=True, remove_nans=True, shapefiles=[\"TN\"], downsample=5, zunit=\"Radian\", xyunit=\"Degree\", ztype=\"Slope\")\n\ngeotiled.plot_shapefile(input_file=\"channel_network.shp\", plot_title=\"TN Channel Network 30m\", reproject_gcs=True, crop_to_shape=\"TN\")\n</code></pre>"}]}